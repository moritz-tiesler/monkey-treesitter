===
Binary expresssion
===

a + 3;
4 * 4;

----

(source_file
    (binary_expression
        (value_name) (number))
    (binary_expression
        (number) (number)))
===
Precedence
===

-3 + 4;
a + 4 * 1 + !a;
(a + a) * 3;
1 + (a + b) + 3;
myArr[1] + 1 * 3;

----

(source_file
    (binary_expression
        (unary_expression
            (number))
        (number))
    (binary_expression
        (binary_expression
            (value_name)
            (binary_expression
                (number) (number)))
        (unary_expression
            (value_name)))
    (binary_expression
        (binary_expression
            (value_name)
            (value_name))
        (number))
    (binary_expression
        (binary_expression
            (number)
            (binary_expression
                (value_name)
                (value_name)))
        (number))
    (binary_expression
        (index_expression
            (value_name)
            (number))
        (binary_expression
            (number)
            (number))))
===
Unary expresssion
===

-3;
!a;
-(3 + 3);
-3 + 2;

---

(source_file 
    (unary_expression
        (number))
    (unary_expression
        (value_name))
    (unary_expression
        (binary_expression
            (number)
            (number)))
    (binary_expression
        (unary_expression
            (number))
        (number)))

===
Funtion literals
===

fn(a, b) { a + b; };
fn(a, b) {
    return a + b;
};

---

(source_file
    (function
        (parameters
            (parameter)
            (parameter))
        (body
            (binary_expression
                (value_name)
                (value_name))))
    (function
            (parameters
                (parameter)
                (parameter))
            (body
                (return_statement
                    (binary_expression
                        (value_name)
                        (value_name))))))
                        
===
Method Calls
===

arr.first();
arr.push(1);
arr.push(1, myVar, (1+2));

---

(source_file
    (method_call
            (value_name)
            (function_call
                (function_name)
                (arguments)))
    (method_call
        (value_name)
        (function_call
            (function_name)
            (arguments
                (number))))
    (method_call
        (value_name)
        (function_call
            (function_name)
            (arguments
                (number)
                (value_name)
                (binary_expression
                    (number)
                    (number))))))

===
Function Calls
===

func(a, b);
func(1 + 1, 2 + 2);
myFunc(a, b) + 4;

---

(source_file
    (function_call
        (function_name)
        (arguments
            (value_name)
            (value_name)))
    (function_call
        (function_name)
        (arguments
            (binary_expression
                (number)
                (number))
            (binary_expression
                (number)
                (number))))
    (binary_expression
        (function_call
            (function_name)
            (arguments
                (value_name)
                (value_name)))
        (number)))

===
Array literals
===

[1, true, a, 2+b];

---

(source_file
    (array_literal
        (number)
        (boolean)
        (value_name)
        (binary_expression
            (number)
            (value_name))))

===
Index expresssion
===

myArr[1];
myArr[1+a];
[1, 2][1];

---

(source_file
    (index_expression
        (value_name)
        (number))
    (index_expression
        (value_name)
        (binary_expression
            (number)
            (value_name)))
    (index_expression
        (array_literal
            (number)
            (number))
        (number)))


===
IIFE
===

fn(a) {a;}(1);
fn(a, b) {a;}(1, b);

---

(source_file
    (function_call
        (function
            (parameters
                (parameter))
            (body
                (value_name)))
        (arguments
            (number)))
    (function_call
        (function
            (parameters
                (parameter)
                (parameter))
            (body
                (value_name)))
        (arguments
            (number)
            (value_name))))
            
===
Hash literal
===

{1: 1, a: a , true: true, 1+2: 2};

---

(source_file
    (hash_literal
        (kv_pair
            (number)
            (number))
        (kv_pair
            (value_name)
            (value_name))
        (kv_pair
            (boolean)
            (boolean))
        (kv_pair
            (binary_expression
                (number)
                (number))
            (number))))

===
Hash Index
===

{1: 2}[1];
{1: 2}[true];
{1: 2}[1+1];
{1: 2}["key"];

---

(source_file
    (index_expression
        (hash_literal
            (kv_pair
                (number)
                (number)))
        (number))
    (index_expression
            (hash_literal
                (kv_pair
                    (number)
                    (number)))
            (boolean))
    (index_expression
            (hash_literal
                (kv_pair
                    (number)
                    (number)))
            (binary_expression
                (number)
                (number)))
     (index_expression
            (hash_literal
                (kv_pair
                    (number)
                    (number)))
            (string_literal)))         

===
String literals
===
"abc$";
---

(source_file
    (string_literal))