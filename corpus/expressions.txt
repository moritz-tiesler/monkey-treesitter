===
Binary expresssion
===

a + 3
4 * 4

----

(source_file
    (binary_expression
        (identifier) (PLUS) (number))
    (binary_expression
        (number) (MUL) (number)))
===
Precedence
===

-3 + 4
a + 4 * 1 - !a
(a + a) * 3
1 + (a + b) + 3
myArr[1] + 1 / 3
a + 3 == b + 1
a > 3 == b <= 2

----

(source_file
    (binary_expression
        (unary_expression
            (number))
        (PLUS)
        (number))
    (binary_expression
        (binary_expression
            (identifier)
            (PLUS)
            (binary_expression
                (number)
                (MUL)
                (number)))
        (MINUS)
        (unary_expression
            (identifier)))
    (binary_expression
        (binary_expression
            (identifier)
            (PLUS)
            (identifier))
        (MUL)
        (number))
    (binary_expression
        (binary_expression
            (number)
            (PLUS)
            (binary_expression
                (identifier)
                (PLUS)
                (identifier)))
        (PLUS)
        (number))
    (binary_expression
        (index_expression
            (identifier)
            (number))
        (PLUS)
        (binary_expression
            (number)
            (DIV)
            (number)))
    (binary_expression
        (binary_expression
            (identifier)
            (PLUS)
            (number))
        (EQ)
        (binary_expression
            (identifier)
            (PLUS)
            (number)))
    (binary_expression
        (binary_expression
            (identifier)
            (GT)
            (number))
        (EQ)
        (binary_expression
            (identifier)
            (LTE)
            (number))))
===
Unary expresssion
===

-3
!a
-(3 + 3)
-3 + 2

---

(source_file 
    (unary_expression
        (number))
    (unary_expression
        (identifier))
    (unary_expression
        (binary_expression
            (number)
            (PLUS)
            (number)))
    (binary_expression
        (unary_expression
            (number))
        (PLUS)
        (number)))

===
Function literals
===

fn(true, b) { a + b };
fn(a, b) {
    return a + b;
}

fn(a, b) {
    let c = 2
    return a + b
}

fn() {}
fn(a) {a}

---

(source_file
    (function
        (parameters
            (parameter
                (identifier))
            (parameter
                (identifier)))
        (body
            (binary_expression
                (identifier)
                (PLUS)
                (identifier))))
    (function
            (parameters
                (parameter 
                    (identifier))
                (parameter
                    (identifier)))
            (body
                (return_statement
                    (binary_expression
                        (identifier)
                        (PLUS)
                        (identifier)))))
    (function
            (parameters
                (parameter 
                    (identifier))
                (parameter
                    (identifier)))
            (body
                (let_statement
                    (identifier)
                    (number))
                (return_statement
                    (binary_expression
                        (identifier)
                        (PLUS)
                        (identifier)))))
    (function
        (parameters)
        (body))
        
    (function
        (parameters 
            (parameter
                (identifier)))
        (body
            (identifier))))
                        
===
Method Calls
===

arr.first()
arr.push(1)
arr.push(1, myVar, (1+2))

---

(source_file
    (method_call
            (identifier)
            (function_call
                (identifier)
                (arguments)))
    (method_call
        (identifier)
        (function_call
            (identifier)
            (arguments
                (number))))
    (method_call
        (identifier)
        (function_call
            (identifier)
            (arguments
                (number)
                (identifier)
                (binary_expression
                    (number)
                    (PLUS)
                    (number))))))

===
Function Calls
===

func(a, b)
func(1 + 1, 2 + 2)
myFunc(a, b) + 4

---

(source_file
    (function_call
        (identifier)
        (arguments
            (identifier)
            (identifier)))
    (function_call
        (identifier)
        (arguments
            (binary_expression
                (number)
                (PLUS)
                (number))
            (binary_expression
                (number)
                (PLUS)
                (number))))
    (binary_expression
        (function_call
            (identifier)
            (arguments
                (identifier)
                (identifier)))
        (PLUS)
        (number)))

===
Array literals
===

[1, true, a, 2+b]

---

(source_file
    (array_literal
        (number)
        (boolean)
        (identifier)
        (binary_expression
            (number)
            (PLUS)
            (identifier))))

===
Index expresssion
===

myArr[1]
myArr[1+a]
[1, 2][1]

---

(source_file
    (index_expression
        (identifier)
        (number))
    (index_expression
        (identifier)
        (binary_expression
            (number)
            (PLUS)
            (identifier)))
    (index_expression
        (array_literal
            (number)
            (number))
        (number)))


===
IIFE
===

fn(a) {a}(1);
fn(a, b) {a}(1, b);

---

(source_file
    (function_call
        (function
            (parameters
                (parameter 
                    (identifier)))
            (body
                (identifier)))
        (arguments
            (number)))
    (function_call
        (function
            (parameters
                (parameter 
                    (identifier))
                (parameter
                    (identifier)))
            (body
                (identifier)))
        (arguments
            (number)
            (identifier))))
            
===
Hash literal
===

{1: 1, a: a , true: true, 1+2: 2}

---

(source_file
    (hash_literal
        (kv_pair
            (number)
            (number))
        (kv_pair
            (identifier)
            (identifier))
        (kv_pair
            (boolean)
            (boolean))
        (kv_pair
            (binary_expression
                (number)
                (PLUS)
                (number))
            (number))))

===
Hash Index
===

{1: 2}[1]
{1: 2}[true]
{1: 2}[1+1]
{1: 2}["key"]

---

(source_file
    (index_expression
        (hash_literal
            (kv_pair
                (number)
                (number)))
        (number))
    (index_expression
            (hash_literal
                (kv_pair
                    (number)
                    (number)))
            (boolean))
    (index_expression
            (hash_literal
                (kv_pair
                    (number)
                    (number)))
            (binary_expression
                (number)
                (PLUS)
                (number)))
     (index_expression
            (hash_literal
                (kv_pair
                    (number)
                    (number)))
            (string_literal)))         

===
String literals
===
"abc$"
---

(source_file
    (string_literal))

===
If Expressions
===
if (true) {1} else {2}
if (!a) {return a} else {return b}
if (b) {b}
if (a == true) {a}
---
(source_file
    (if_expression
        (condition
            (boolean))
        (consequence
            (number))
        (alternative
            (number)))
    (if_expression
        (condition
            (unary_expression
                (identifier)))
        (consequence
            (return_statement
                (identifier)))
        (alternative
            (return_statement
                (identifier))))
    (if_expression
        (condition
            (identifier))
        (consequence
            (identifier)))
    (if_expression
        (condition
            (binary_expression
                (identifier)
                (EQ)
                (boolean)))
        (consequence
            (identifier))))