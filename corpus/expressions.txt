===
Binary expresssion
===

a + 3
4 * 4

----

(source_file
    (binary_expression
        (identifier) (number))
    (binary_expression
        (number) (number)))
===
Precedence
===

let x = -3 + 4
let y = a + 4 * 1 + !a
let z = (a + a) * 3
let v = 1 + (a + b) + 3

----

(source_file
    (let_statement
        (identifier)
        (binary_expression
            (unary_expression
                (number))
            (number)))
    (let_statement
        (identifier)
        (binary_expression
            (binary_expression
                (identifier)
                (binary_expression
                    (number) (number)))
            (unary_expression
                (identifier))))
    (let_statement
        (identifier)
        (binary_expression
            (binary_expression
                (identifier)
                (identifier))
            (number)))
    (let_statement
        (identifier)
        (binary_expression
            (binary_expression
                (number)
                (binary_expression
                    (identifier)
                    (identifier)))
            (number))))
===
Unary expresssion
===

-3
!a
-(3 + 3)
-3 + 2

---

(source_file 
    (unary_expression
        (number))
    (unary_expression
        (identifier))
    (unary_expression
        (binary_expression
            (number)
            (number)))
    (binary_expression
        (unary_expression
            (number))
        (number)))

===
Funtion literals
===

fn(a, b) { a + b }
fn(a, b) {
    return a + b
}

---

(source_file
    (function
        (parameters
            (identifier)
            (identifier))
        (block
            (binary_expression
                (identifier)
                (identifier))))
    (function
            (parameters
                (identifier)
                (identifier))
            (block
                (return_statement
                    (binary_expression
                        (identifier)
                        (identifier))))))
                        



